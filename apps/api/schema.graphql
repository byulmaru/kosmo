type Account implements Node {
  id: ID!
  name: String!
  profileCount: Count!
  profiles: [Profile!]!
}

enum AccountState {
  ACTIVE
  DELETED
}

"""Base64 encoded binary data"""
scalar Binary

type Count {
  current: Int!

  """null if unlimited"""
  max: Int
}

input CreateProfileInput {
  handle: String!
  useCreatedProfile: Boolean! = true
}

input DeleteProfileInput {
  profileId: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createProfile(input: CreateProfileInput!): Profile!
  deleteProfile(input: DeleteProfileInput!): Profile!
  useProfile(input: UseProfileInput!): Profile!
}

interface Node {
  id: ID!
}

type Profile implements Node {
  description: String
  displayName(fallback: Boolean! = true): String!
  handle: String!
  id: ID!
  url: String!
}

type Query {
  me: Account
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  usingProfile: Profile
}

"""Unix timestamp in milliseconds"""
scalar Timestamp

input UseProfileInput {
  profileId: String!
}
