type Account implements Node {
  id: ID!
  name: String!
  profileCount: Count!
  profiles: [Profile!]!
}

enum AccountState {
  ACTIVE
  DELETED
}

"""Base64 encoded binary data"""
scalar Binary

type ConflictError implements Error {
  message: String!
}

type Count {
  current: Int!

  """null if unlimited"""
  max: Int
}

input CreateProfileInput {
  handle: String!
  useCreatedProfile: Boolean! = true
}

union CreateProfileResult = CreateProfileSuccess | LimitExceededError | ValidationError

type CreateProfileSuccess {
  profile: Profile!
}

input DeleteProfileInput {
  profileId: String!
}

union DeleteProfileResult = DeleteProfileSuccess | ForbiddenError

type DeleteProfileSuccess {
  profile: Profile!
}

interface Error {
  message: String!
}

interface FieldError implements Error {
  message: String!
  path: String
}

input FollowProfileInput {
  actorProfileId: String
  profileId: String!
}

union FollowProfileResult = FollowProfileSuccess | ForbiddenError | NotFoundError

type FollowProfileSuccess {
  profile: Profile!
}

type ForbiddenError implements Error {
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LimitExceededError implements Error {
  limit: Int!
  message: String!
  object: String!
}

type Mutation {
  createProfile(input: CreateProfileInput!): CreateProfileResult!
  deleteProfile(input: DeleteProfileInput!): DeleteProfileResult!
  followProfile(input: FollowProfileInput!): FollowProfileResult!
  unfollowProfile(input: UnfollowProfileInput!): UnfollowProfileResult!
  useProfile(input: UseProfileInput!): UseProfileResult!
}

interface Node {
  id: ID!
}

type NotFoundError implements Error {
  message: String!
}

type Profile implements Node {
  description: String
  displayName(fallback: Boolean! = true): String!
  handle: String!
  id: ID!
  url: String!
}

type Query {
  me: Account
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  usingProfile: Profile
}

"""Unix timestamp in milliseconds"""
scalar Timestamp

input UnfollowProfileInput {
  actorProfileId: String
  profileId: String!
}

union UnfollowProfileResult = ForbiddenError | NotFoundError | UnfollowProfileSuccess

type UnfollowProfileSuccess {
  profile: Profile!
}

input UseProfileInput {
  profileId: String!
}

union UseProfileResult = ForbiddenError | UseProfileSuccess

type UseProfileSuccess {
  profile: Profile!
}

type ValidationError implements Error & FieldError {
  message: String!
  path: String
}
